HSbatPctNVD3
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'multiBarHorizontalChart', stack = "offset")
HSbatPctNVD3
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'multiBarHorizontalChart', stack = "Offset")
HSbatPctNVD3
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'multiBarHorizontalChart', stack = "StackOffset")
HSbatPctNVD3
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'multiBarHorizontalChart', stack = "StackOffset")
HSbatPctNVD3
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'multiBarHorizontalChart', offset= 'expand')
HSbatPctNVD3
hr?
`?\\
?hr()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
HSbar <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbar$yAxis(type= "addCategoryAxis", orderRule = 'rev(value)')
HSbar$xAxis(type= "addMeasureAxis")
HSbar$legend(
x = 0,
y = 0,
width = 500,
height = 1500,
horizontalAlign = "center")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbar
shiny::runApp()
HSbar <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbar$yAxis(type= "addCategoryAxis", orderRule = 'rev(value)')
HSbar$xAxis(type= "addMeasureAxis")
HSbar$legend(
x = 0,
y = 0,
width = 500,
height = 1500,
horizontalAlign = "center")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbar
HSbarPct <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbarPct$yAxis(type= "addCategoryAxis")
HSbarPct$xAxis(type= "addPctAxis")
HSbarPct$legend(
x = 0,
y = 0,
width = 700,
height = 700,
horizontalAlign = "right")
HSbarPct
shiny::runApp()
shiny::runApp()
?dom
sessionInfo()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
save.image("~/R_Code/NLoad_shiny/.RData")
shiny::runApp()
shiny::runApp()
library(shiny)
library(rCharts)
runApp(list(
ui = fluidPage(
title = 'Multiple rCharts',
fluidRow(
column(width = 5, chartOutput('chart1', 'polycharts')),
column(width = 6, offset = 1, chartOutput('chart2', 'nvd3'))
)
),
server = function(input, output){
output$chart1 <- renderChart2({
rPlot(mpg ~ wt, data = mtcars, type = 'point')
})
output$chart2 <- renderChart2({
nPlot(mpg ~ wt, data = mtcars, type = 'scatterChart')
})
}
))
shiny::runApp()
rm(HSbatPctNVD3)
save.image("~/R_Code/NLoad_shiny/.RData")
shiny::runApp()
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(septic_NLoad) %>%
melt(id.vars = NLoad_names[1:2]) %>%
filter(variable == 'atmospheric_NLoad')
View(NLoads.Melt)
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(septic_NLoad) %>%
melt(id.vars = NLoad_names[1:2]) #%>%
#	filter(variable == 'atmospheric_NLoad')
View(NLoads.Melt)
unique(NLoads.Melt$variable)
shiny::runApp()
save.image("~/R_Code/NLoad_shiny/.RData")
shiny::runApp()
shiny::runApp()
unique(NLoads.Melt$variable)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?list
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?num_range
shiny::runApp()
?filter
?any
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
library(reshape2)
library(dplyr)
library(rCharts)
library(ggplot2)
library(RColorBrewer)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?which
shiny::runApp()
shiny::runApp()
shiny::runApp()
?split
shiny::runApp()
str(input$SourcesN)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?Freq
require(plyr)
dat = as.data.frame(HairEyeColor)
dat = ddply(dat, .(Hair), summarize, Freq = sum(Freq), Group = "A")
require(rCharts)
n1 <- nPlot(Freq ~ Group, data = dat, group = 'Hair', type = 'multiBarChart')
n1
dat = as.data.frame(HairEyeColor)
dat2 = ddply(dat, .(Hair), summarize, Freq = sum(Freq), Group = "A")
View(dat)
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'multiBarHorizontalChart', offset= 'expand')
HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'multiBarHorizontalChart', offset= 'expand')
HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code , group = "variable", data= NLoads.Melt, type = 'stackedAreaChart', offset= 'expand')
HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
NLoad_names <- names(NLoad_outs) # create vectoir list of names for melt/cast
NLoads.Melt <- NLoad_outs %>%
select(input$SourcesN) %>%	# added input selection here instead of filtering later
# 			arrange(septic_NLoad) %>%
melt(id.vars = NLoad_names[1:2])# %>%
#filter(variable == as.vector(input$SourcesN, mode = "any"))
HSbar <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbar$yAxis(type= "addCategoryAxis", orderRule = 'rev(value)')
HSbar$xAxis(type= "addMeasureAxis")
HSbar$legend(
x = 0,
y = 0,
width = 500,
height = 1500,
horizontalAlign = "center")
HSbar$defaultColors(brewer.pal(6, "Set1"))
return(HSbar)
shiny::runApp()
ind
?ind
??ind
shiny::runApp()
shiny::runApp()
runApp("censusVis", display.mode = "showcase")
runApp(display.mode = "showcase")
HSbarPct <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbarPct$yAxis(type= "addCategoryAxis")
HSbarPct$xAxis(type= "addPctAxis")
HSbarPct$legend(
x = 0,
y = 0,
width = 700,
height = 700,
horizontalAlign = "right")
HSbarPct$defaultColors(brewer.pal(6, "Set1"))
return(HSbarPct)
HSbar <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbar$yAxis(type= "addCategoryAxis", orderRule = 'rev(value)')
HSbar$xAxis(type= "addMeasureAxis")
HSbar$legend(
x = 0,
y = 0,
width = 500,
height = 1500,
horizontalAlign = "center")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbar
HSbarPct <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbarPct$yAxis(type= "addCategoryAxis")
HSbarPct$xAxis(type= "addPctAxis")
HSbarPct$legend(
x = 0,
y = 0,
width = 700,
height = 700,
horizontalAlign = "right")
HSbarPct
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
HSbarPct <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbarPct$yAxis(type= "addCategoryAxis")
HSbarPct$xAxis(type= "addPctAxis")
HSbarPct$legend(
x = 0,
y = 0,
width = 700,
height = 700,
horizontalAlign = "right")
HSbarPct
HSbar <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbar$yAxis(type= "addCategoryAxis", orderRule = 'rev(value)')
HSbar$xAxis(type= "addMeasureAxis")
HSbar$legend(
x = 0,
y = 0,
width = 500,
height = 1500,
horizontalAlign = "center")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbar
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(dat)
rm(dat2)
shiny::runApp()
shiny::runApp()
NLoad_names <- names(NLoad_outs) # create vectoir list of names for melt/cast
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(septic_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
# Dimple chart library
# Stacked horizontal plot Total loads descending
HSbar <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbar$yAxis(type= "addCategoryAxis", orderRule = 'rev(value)')
HSbar$xAxis(type= "addMeasureAxis")
HSbar$legend(
x = 0,
y = 0,
width = 500,
height = 1500,
horizontalAlign = "center")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbar
# Stacked horizontal percentage Total plot sorted by total load ascending
HSbarPct <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbarPct$yAxis(type= "addCategoryAxis")
HSbarPct$xAxis(type= "addPctAxis")
HSbarPct$legend(
x = 0,
y = 0,
width = 700,
height = 700,
horizontalAlign = "right")
HSbarPct
HSbarPct <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbarPct$yAxis(type= "addCategoryAxis")
HSbarPct$xAxis(type= "addPctAxis")
HSbarPct$legend(
x = 0,
y = 0,
width = 700,
height = 700,
horizontalAlign = "right")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbarPct
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Dimple chart library
# Stacked horizontal plot Total loads descending
HSbar <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbar$yAxis(type= "addCategoryAxis", orderRule = 'rev(value)')
HSbar$xAxis(type= "addMeasureAxis")
HSbar$legend(
x = 0,
y = 0,
width = 500,
height = 1500,
horizontalAlign = "center")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbar
# Stacked horizontal percentage Total plot sorted by total load ascending
HSbarPct <- dPlot(y = "subwatershed_code", x = "value", data= NLoads.Melt, groups= "variable", type = "bar", height = 700, width= 700)
HSbarPct$yAxis(type= "addCategoryAxis")
HSbarPct$xAxis(type= "addPctAxis")
HSbarPct$legend(
x = 0,
y = 0,
width = 700,
height = 700,
horizontalAlign = "right")
HSbar$defaultColors(brewer.pal(6, "Set1"))
HSbarPct
# NVD3
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(atmospheric_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code,
group = "variable",
data = NLoads.Melt,
type = 'multiBarChart', offset= 'expand')
#HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
# NVD3
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(atmospheric_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code,
group = "variable",
data = NLoads.Melt,
type = 'multiHorizontalBarChart', offset= 'expand')
#HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
# NVD3
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(atmospheric_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code,
group = "variable",
data = NLoads.Melt,
type = "multiBarHorizontalChart', offset= 'expand')
#HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(atmospheric_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code,
group = "variable",
data = NLoads.Melt,
type = "multiBarHorizontalChart", offset= 'expand')
#HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(atmospheric_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code,
group = "variable",
data = NLoads.Melt,
type = "multiBarHorizontalChart")
#HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3
HSbatPctNVD3$params$height= 1000
HSbarPcttNVD3
HSbatPcttNVD3
HSbatPctNVD3
HSbatPctNVD3
HSbatPctNVD3
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(atmospheric_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code,
group = "variable",
data = NLoads.Melt,
type = "multiBarHorizontalChart")
#HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3$params$height= 500
HSbatPctNVD3
#HSbatPctNVD3$chart(style = 'expand')
HSbatPctNVD3$params$height= 700
HSbatPctNVD3
shiny::runApp()
shiny::runApp()
HSbatPctNVD3$lib
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
NLoads.Melt <- NLoad_outs %>%
select(1:8) %>%
arrange(atmospheric_NLoad) %>%
melt(id.vars = NLoad_names[1:2])
HSbatPctNVD3 <- nPlot(value ~ subwatershed_code,
group = "variable",
data = NLoads.Melt,
type = "multiBarHorizontalChart")
HSbatPctNVD3$params$height= 700
return(HSbatPctNVD3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot1 <- NVD3$new()
library("rCharts", lib.loc="~/R/win-library/3.1")
nvd3Plot
plot1 <- nvd3$new()
plot1 <- nvd3$new()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp(display.mode = "showcase")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("rjson", lib.loc="~/R/win-library/3.1")
library(rjson)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
